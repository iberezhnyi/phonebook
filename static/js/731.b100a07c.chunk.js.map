{"version":3,"file":"static/js/731.b100a07c.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectFilter = state => state.filter;","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 400px;\n  margin-right: auto;\n  margin-left: auto;\n  margin-bottom: 16px;\n  padding: 8px;\n`;\n\nexport const LabelField = styled.label`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 1.2;\n`;\n\nexport const InputField = styled.input`\n  padding: 16px;\n  font-size: 16px;\n  line-height: 1.2;\n  border: 1px solid #35363a;\n  border-radius: 8px;\n  width: 292px;\n  cursor: pointer;\n`;\n\nexport const ButtonAdding = styled.button`\n  padding: 8px 24px;\n  font-size: 16px;\n  font-weight: 700;\n  line-height: 1.2;\n  border: 1px solid;\n  border-radius: 8px;\n  cursor: pointer;\n  background: #35363a;\n  color: honeydew;\n  transition: background-color 0.25s ease-in-out, color 0.25s ease-in-out,\n    border-color 0.25s ease-in-out, transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    background: #35363a;\n    border: 1px solid;\n    transform: scale(1.1);\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from '../../redux/selectors';\nimport * as contactsOperations from '../../redux/contacts/contactsOperations';\nimport {\n  Form,\n  LabelField,\n  InputField,\n  ButtonAdding,\n} from './ContactForm.styled';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    const isContactNameInList = contactName => {\n      return contacts.find(contact => contact.name === contactName);\n    };\n\n    if (isContactNameInList(name)) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(contactsOperations.addContact(newContact));\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <LabelField>\n        Name\n        <InputField\n          type=\"text\"\n          name=\"name\"\n          // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          // title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          autoComplete=\"off\"\n          value={name}\n          onChange={handleInputChange}\n        />\n      </LabelField>\n\n      <LabelField>\n        Number\n        <InputField\n          type=\"tel\"\n          name=\"number\"\n          // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          // title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          autoComplete=\"off\"\n          value={number}\n          onChange={handleInputChange}\n        />\n      </LabelField>\n\n      <ButtonAdding type=\"submit\">Add contact</ButtonAdding>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 400px;\n  margin-right: auto;\n  margin-left: auto;\n  margin-bottom: 8px;\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 1.2;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 8px;\n  width: 196px;\n  font-size: 16px;\n  line-height: 1.2;\n  border: 1px solid #35363a;\n  border-radius: 8px;\n  cursor: pointer;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/selectors';\nimport { filterList } from '../../redux/filter/filterSlice';\nimport { FilterLabel, FilterInput } from './Filter.styled';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <FilterLabel>\n      Find contacts by name\n      <FilterInput\n        type=\"text\"\n        value={filter}\n        onChange={event => dispatch(filterList(event.currentTarget.value))}\n      />\n    </FilterLabel>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  width: 400px;\n  margin: 0 auto;\n  padding: 8px;\n  text-align: start;\n  list-style: none;\n  /* border: 1px solid chocolate;\n    border-radius: 8px; */\n`;\n","import styled from 'styled-components';\n\nexport const ContactsItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  &:not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nexport const ContactName = styled.p`\n  margin: 0;\n  font-size: 16px;\n  line-height: 1.5;\n`;\n\nexport const ButtonDeleting = styled.button`\n  padding: 4px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 1.2;\n  border: 1px solid;\n  border-radius: 8px;\n  cursor: pointer;\n  background: #35363a;\n  color: honeydew;\n  transition: background-color 0.25s ease-in-out, color 0.25s ease-in-out,\n    border-color 0.25s ease-in-out, transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    background: #35363a;\n    border: 1px solid;\n    transform: scale(1.1);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport * as contactsOperations from '../../redux/contacts/contactsOperations';\nimport {\n  ContactsItem,\n  ContactName,\n  ButtonDeleting,\n} from './ContactItem.styled';\n\nexport default function ContactItem({ id, name, number }) {\n  const dispatch = useDispatch();\n\n  return (\n    <ContactsItem>\n      <ContactName>\n        {name}: {number}\n      </ContactName>\n      <ButtonDeleting\n        type=\"button\"\n        onClick={() => dispatch(contactsOperations.deleteContact(id))}\n      >\n        Delete\n      </ButtonDeleting>\n    </ContactsItem>\n  );\n}\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts, selectFilter } from '../../redux/selectors';\nimport { ContactsList } from './ContactList.styled';\nimport * as contactsOperations from '../../redux/contacts/contactsOperations';\nimport ContactItem from '../ContactItem/ContactItem';\n\nexport default function ContactList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  const getFilteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const filteredContacts = getFilteredContacts();\n\n  return (\n    <ContactsList>\n      {filteredContacts.map(({ id, name, number }) => (\n        <ContactItem key={id} id={id} name={name} number={number} />\n      ))}\n    </ContactsList>\n  );\n}\n","import styled from 'styled-components';\n\nexport const ContactsGroup = styled.div`\n  margin: 0;\n  padding: 16px 40px;\n  text-align: center;\n`;\n\nexport const AppTitle = styled.h1`\n  margin: 0 0 16px 0;\n  font-size: 32px;\n  font-weight: 700;\n  line-height: 1.5;\n`;\n\nexport const ContactsTitle = styled.h2`\n  margin: 0 0 8px 0;\n  font-size: 24px;\n  font-weight: 500;\n  line-height: 1.5;\n`;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport Loader from 'components/Loader/Loader';\nimport { selectIsLoading } from '../../redux/selectors';\nimport { useSelector } from 'react-redux';\nimport { ContactsGroup, AppTitle, ContactsTitle } from './Contacts.styled';\n\nconst ContactsPage = () => {\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <ContactsGroup>\n      <AppTitle>Phonebook</AppTitle>\n      <ContactForm />\n      <ContactsTitle>Contacts</ContactsTitle>\n      <Filter />\n      {isLoading && <Loader />}\n      <ContactList />\n    </ContactsGroup>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilter","filter","Form","styled","_templateObject","_taggedTemplateLiteral","LabelField","_templateObject2","InputField","_templateObject3","ButtonAdding","_templateObject4","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","useSelector","dispatch","useDispatch","handleInputChange","event","_event$currentTarget","currentTarget","value","_jsxs","onSubmit","preventDefault","contactName","newContact","find","contact","alert","concat","contactsOperations","children","_jsx","type","required","autoComplete","onChange","FilterLabel","FilterInput","filterList","ContactsList","ContactsItem","ContactName","ButtonDeleting","ContactItem","_ref","onClick","ContactList","useEffect","filteredContacts","normalizedFilter","toLowerCase","includes","getFilteredContacts","map","ContactsGroup","AppTitle","ContactsTitle","ContactForm","Filter","Loader"],"sourceRoot":""}