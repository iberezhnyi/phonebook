{"version":3,"file":"static/js/172.0617f7d1.chunk.js","mappings":"8UAEaA,EAAgBC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+FAO1BC,EAAgBH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,8FAOzBG,EAAOL,EAAAA,GAAAA,KAAWM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,iHAQlBK,EAAaP,EAAAA,GAAAA,MAAYQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,6KAUzBO,EAAaT,EAAAA,GAAAA,MAAYU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,+JAUzBS,EAAeX,EAAAA,GAAAA,OAAaY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,0d,UC7BnCW,EAAe,CACnBC,MAAO,GACPC,SAAU,IA0EZ,EAvEkB,WAEhB,IAAAC,GAA4BC,EAAAA,EAAAA,UAASJ,GAAaK,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GAGlBI,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,GAErBC,EAAoB,SAAAC,GACxB,IAAAC,EAAwBD,EAAME,cAAtBC,EAAIF,EAAJE,KAAMC,EAAKH,EAALG,MACdX,GAAU,SAAAY,GAAI,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAAE,EAAAA,EAAAA,GAAA,GAAGJ,EAAOC,GAAK,GAC7C,EAEMI,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAMZ,GAAK,OAAAW,IAAAA,MAAA,SAAAE,GAAA,cAAAA,EAAAR,KAAAQ,EAAAC,MAAA,OAK9B,OAJAd,EAAMe,iBAINF,EAAAR,KAAA,EAAAQ,EAAAC,KAAA,EAGQpB,GAASsB,EAAAA,EAAAA,GAAexB,IAASyB,SAAS,KAAD,EAAAJ,EAAAC,KAAA,gBAAAD,EAAAR,KAAA,EAAAQ,EAAAK,GAAAL,EAAA,SAE/CM,QAAQC,IAAGP,EAAAK,IACXG,EAAAA,GAAAA,MAAY,mDAAmD,QAGjE5B,EAAUR,GAAc,yBAAA4B,EAAAS,OAAA,GAAAV,EAAA,kBACzB,gBAfiBW,GAAA,OAAAd,EAAAe,MAAA,KAAAC,UAAA,KAiBlB,OACEC,EAAAA,EAAAA,MAACvD,EAAa,CAAAwD,SAAA,CACA,YAAX/B,IAAwBgC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KAEhCD,EAAAA,EAAAA,KAACrD,EAAa,CAAAoD,SAAC,kCAEfD,EAAAA,EAAAA,MAACjD,EAAI,CAACqD,SAAUtB,EAAamB,SAAA,EAC3BD,EAAAA,EAAAA,MAAC/C,EAAU,CAAAgD,SAAA,CAAC,SAEVC,EAAAA,EAAAA,KAAC/C,EAAU,CACTkD,KAAK,QACL5B,KAAK,QACL6B,UAAQ,EACRC,aAAa,KACbC,YAAY,iBACZ9B,MAAOZ,EAAON,MACdiD,SAAUpC,QAId2B,EAAAA,EAAAA,MAAC/C,EAAU,CAAAgD,SAAA,CAAC,YAEVC,EAAAA,EAAAA,KAAC/C,EACC,CACAkD,KAAK,WACL5B,KAAK,WACL6B,UAAQ,EACRC,aAAa,MACbC,YAAY,aACZ9B,MAAOZ,EAAOL,SACdgD,SAAUpC,QAKd6B,EAAAA,EAAAA,KAAC7C,EAAY,CAACgD,KAAK,SAAQJ,SAAC,gBAIpC,C","sources":["pages/Login/Login.styled.jsx","pages/Login/Login.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const RegisterGroup = styled.div`\n  margin: 0;\n  padding: 16px 40px;\n  text-align: center;\n  background: lavender;\n`;\n\nexport const RegisterTitle = styled.h2`\n  margin: 0 0 8px 0;\n  font-size: 24px;\n  font-weight: 500;\n  line-height: 1.5;\n`;\n\nexport const Form = styled.form`\n  width: 400px;\n  margin-right: auto;\n  margin-left: auto;\n  margin-bottom: 16px;\n  padding: 8px;\n`;\n\nexport const LabelField = styled.label`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 1.2;\n`;\n\nexport const InputField = styled.input`\n  padding: 16px;\n  font-size: 16px;\n  line-height: 1.2;\n  border: 1px solid #35363a;\n  border-radius: 8px;\n  width: 284px;\n  cursor: pointer;\n`;\n\nexport const ButtonAdding = styled.button`\n  padding: 8px 24px;\n  font-size: 16px;\n  font-weight: 700;\n  line-height: 1.2;\n  border: 1px solid;\n  border-radius: 8px;\n  cursor: pointer;\n  background: #35363a;\n  color: honeydew;\n  transition: background-color 0.25s ease-in-out, color 0.25s ease-in-out,\n    border-color 0.25s ease-in-out, transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    background: #35363a;\n\n    border: 1px solid;\n    transform: scale(1.1);\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { authLoginThunk } from '../../redux/auth/auth.thunk';\nimport { selectAuthStatus } from '../../redux/auth/auth.selector';\nimport { toast } from 'react-toastify';\nimport Loader from 'components/Loader/Loader';\nimport {\n  RegisterGroup,\n  RegisterTitle,\n  Form,\n  LabelField,\n  InputField,\n  ButtonAdding,\n} from './Login.styled';\n\nconst initialState = {\n  email: '',\n  password: '',\n};\n\nconst LoginPage = () => {\n  // const [isLoading, setIsLoading] = useState(false);\n  const [values, setValues] = useState(initialState);\n  // const [isPassword, setIsPassword] = useState(true);\n\n  const dispatch = useDispatch();\n  const status = useSelector(selectAuthStatus);\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    setValues(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    // ======\n    // setIsLoading(true);\n    // ======\n\n    try {\n      await dispatch(authLoginThunk(values)).unwrap();\n    } catch (error) {\n      console.log(error);\n      toast.error('Something is wrong with your email or password.');\n    }\n\n    setValues(initialState);\n  };\n\n  return (\n    <RegisterGroup>\n      {status === 'loading' && <Loader />}\n\n      <RegisterTitle>Please Log in Your Phonebook</RegisterTitle>\n\n      <Form onSubmit={handleSubmit}>\n        <LabelField>\n          Email\n          <InputField\n            type=\"email\"\n            name=\"email\"\n            required\n            autoComplete=\"on\"\n            placeholder=\"name@email.com\"\n            value={values.email}\n            onChange={handleInputChange}\n          />\n        </LabelField>\n\n        <LabelField>\n          Password\n          <InputField\n            // type={isPassword ? \"password\" : \"text\"}\n            type=\"password\"\n            name=\"password\"\n            required\n            autoComplete=\"off\"\n            placeholder=\"Name123456\"\n            value={values.password}\n            onChange={handleInputChange}\n          />\n        </LabelField>\n\n        {/* <ButtonAdding type=\"button\" onClick={() => setIsPassword(prev => !prev)}>Show Password</ButtonAdding> */}\n        <ButtonAdding type=\"submit\">Log in</ButtonAdding>\n      </Form>\n    </RegisterGroup>\n  );\n};\n\nexport default LoginPage;\n"],"names":["RegisterGroup","styled","_templateObject","_taggedTemplateLiteral","RegisterTitle","_templateObject2","Form","_templateObject3","LabelField","_templateObject4","InputField","_templateObject5","ButtonAdding","_templateObject6","initialState","email","password","_useState","useState","_useState2","_slicedToArray","values","setValues","dispatch","useDispatch","status","useSelector","selectAuthStatus","handleInputChange","event","_event$currentTarget","currentTarget","name","value","prev","_objectSpread","_defineProperty","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_context","next","preventDefault","authLoginThunk","unwrap","t0","console","log","toast","stop","_x","apply","arguments","_jsxs","children","_jsx","Loader","onSubmit","type","required","autoComplete","placeholder","onChange"],"sourceRoot":""}