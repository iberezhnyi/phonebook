{"version":3,"file":"static/js/464.cdbd8373.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectFilter = state => state.filter;","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  /* width: 400px; */\n  margin-right: auto;\n  margin-left: auto;\n  margin-bottom: 40px;\n  /* padding: 8px; */\n\n  @media screen and (min-width: 768px) {\n    width: 400px;\n  }\n`;\n\nexport const LabelField = styled.label`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  margin-bottom: 16px;\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 1.2;\n\n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n  }\n`;\n\nexport const LabelName = styled.p`\n  margin-bottom: 10px;\n`;\n\nexport const InputField = styled.input`\n  padding: 16px;\n  font-size: 16px;\n  line-height: 1.2;\n  border: 1px solid #35363a;\n  border-radius: 8px;\n  /* width: 292px; */\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    width: 292px;\n  }\n`;\n\nexport const ButtonAdding = styled.button`\n  padding: 8px 24px;\n  font-size: 16px;\n  font-weight: 700;\n  line-height: 1.2;\n  border: 1px solid;\n  border-radius: 8px;\n  cursor: pointer;\n  background: #35363a;\n  color: honeydew;\n  transition: background-color 0.25s ease-in-out, color 0.25s ease-in-out,\n    border-color 0.25s ease-in-out, transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    background: #35363a;\n    border: 1px solid;\n    transform: scale(1.1);\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { nanoid } from 'nanoid';\nimport { selectContacts } from '../../redux/selectors';\nimport * as contactsOperations from '../../redux/contacts/contactsOperations';\nimport {\n  Form,\n  LabelField,\n  InputField,\n  ButtonAdding,\n  LabelName,\n} from './ContactForm.styled';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setPhone(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const newContact = {\n      // id: nanoid(),\n      name,\n      phone,\n    };\n\n    const isContactNameInList = contactName => {\n      return contacts.find(contact => contact.name === contactName);\n    };\n\n    if (isContactNameInList(name)) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(contactsOperations.addContact(newContact));\n\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <LabelField>\n        <LabelName>Name</LabelName>\n        <InputField\n          type=\"text\"\n          name=\"name\"\n          // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          // title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          autoComplete=\"off\"\n          value={name}\n          onChange={handleInputChange}\n        />\n      </LabelField>\n\n      <LabelField>\n        <LabelName>Phone</LabelName>\n        <InputField\n          type=\"tel\"\n          name=\"phone\"\n          // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          // title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          autoComplete=\"off\"\n          value={phone}\n          onChange={handleInputChange}\n        />\n      </LabelField>\n\n      <ButtonAdding type=\"submit\">Add contact</ButtonAdding>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n  /* display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 400px; */\n  margin-right: auto;\n  margin-left: auto;\n  margin-bottom: 8px;\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 1.2;\n`;\n\nexport const LabelName = styled.p`\n  margin-bottom: 10px;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 8px;\n  width: 196px;\n  font-size: 16px;\n  line-height: 1.2;\n  border: 1px solid #35363a;\n  border-radius: 8px;\n  cursor: pointer;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/selectors';\nimport { filterList } from '../../redux/filter/filterSlice';\nimport { FilterLabel, FilterInput, LabelName } from './Filter.styled';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <FilterLabel>\n      <LabelName>Find contacts by name</LabelName>\n      <FilterInput\n        type=\"text\"\n        value={filter}\n        onChange={event => dispatch(filterList(event.currentTarget.value))}\n      />\n    </FilterLabel>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  /* width: 400px; */\n  margin: 0 auto;\n  padding: 8px;\n  text-align: start;\n  list-style: none;\n  /* border: 1px solid chocolate;\n    border-radius: 8px; */\n\n  @media screen and (min-width: 768px) {\n    width: 400px;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const ContactsItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  &:not(:last-child) {\n    margin-bottom: 12px;\n  }\n`;\n\nexport const ContactName = styled.p`\n  margin: 0;\n  font-size: 16px;\n  line-height: 1.5;\n`;\n\nexport const ButtonDeleting = styled.button`\n  padding: 4px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 1.2;\n  border: 1px solid;\n  border-radius: 8px;\n  cursor: pointer;\n  background: #35363a;\n  color: honeydew;\n  transition: background-color 0.25s ease-in-out, color 0.25s ease-in-out,\n    border-color 0.25s ease-in-out, transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    background: #35363a;\n    border: 1px solid;\n    transform: scale(1.1);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport * as contactsOperations from '../../redux/contacts/contactsOperations';\nimport {\n  ContactsItem,\n  ContactName,\n  ButtonDeleting,\n} from './ContactItem.styled';\n\nexport default function ContactItem({ id, name, phone }) {\n  const dispatch = useDispatch();\n\n  return (\n    <ContactsItem>\n      <ContactName>\n        {name}: {phone}\n      </ContactName>\n      <ButtonDeleting\n        type=\"button\"\n        onClick={() => dispatch(contactsOperations.deleteContact(id))}\n      >\n        Delete\n      </ButtonDeleting>\n    </ContactsItem>\n  );\n}\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  phone: PropTypes.string.isRequired,\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts, selectFilter } from '../../redux/selectors';\nimport { ContactsList } from './ContactList.styled';\nimport * as contactsOperations from '../../redux/contacts/contactsOperations';\nimport ContactItem from '../ContactItem/ContactItem';\n\nexport default function ContactList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  const getFilteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const filteredContacts = getFilteredContacts();\n\n  return (\n    <ContactsList>\n      {filteredContacts.map(({ id, name, phone }) => (\n        <ContactItem key={id} id={id} name={name} phone={phone} />\n      ))}\n    </ContactsList>\n  );\n}\n","import styled from 'styled-components';\n\nexport const ContactsGroup = styled.div`\n  margin: 0;\n  padding: 16px 40px;\n  /* text-align: center; */\n\n  @media screen and (min-width: 768px) {\n    text-align: center;\n  }\n`;\n\nexport const AppTitle = styled.h1`\n  margin: 0 0 16px 0;\n  font-size: 32px;\n  font-weight: 700;\n  line-height: 1.5;\n`;\n\nexport const ContactsTitle = styled.h2`\n  margin: 0 0 8px 0;\n  font-size: 24px;\n  font-weight: 500;\n  line-height: 1.5;\n`;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport Loader from 'components/Loader/Loader';\nimport { selectIsLoading } from '../../redux/selectors';\nimport { useSelector } from 'react-redux';\nimport { ContactsGroup, AppTitle, ContactsTitle } from './Contacts.styled';\n\nconst ContactsPage = () => {\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <ContactsGroup>\n      <AppTitle>Phonebook</AppTitle>\n      <ContactForm />\n      <ContactsTitle>Contacts</ContactsTitle>\n      <Filter />\n      {isLoading && <Loader />}\n      <ContactList />\n    </ContactsGroup>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilter","filter","Form","styled","_templateObject","_taggedTemplateLiteral","LabelField","_templateObject2","LabelName","_templateObject3","InputField","_templateObject4","ButtonAdding","_templateObject5","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","phone","setPhone","useSelector","dispatch","useDispatch","handleInputChange","event","_event$currentTarget","currentTarget","value","_jsxs","onSubmit","preventDefault","contactName","newContact","find","contact","alert","concat","contactsOperations","children","_jsx","type","required","autoComplete","onChange","FilterLabel","FilterInput","filterList","ContactsList","ContactsItem","ContactName","ButtonDeleting","ContactItem","_ref","id","onClick","ContactList","useEffect","filteredContacts","normalizedFilter","toLowerCase","includes","getFilteredContacts","map","ContactsGroup","AppTitle","ContactsTitle","ContactForm","Filter","Loader"],"sourceRoot":""}